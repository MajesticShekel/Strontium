#type common
#version 440
/*
 * PBR shader program for an occluded directional light. Follows the Filament
 * material system (somewhat).
 * https://google.github.io/filament/Filament.md.html#materialsystem/standardmodel
 */

#type vertex
void main()
{
  vec2 position = vec2(gl_VertexID % 2, gl_VertexID / 2) * 4.0 - 1;

  gl_Position = vec4(position, 0.0, 1.0);
}

#type fragment
#define PI 3.141592654
#define NUM_CASCADES 4
#define WARP 44.0

// Camera specific uniforms.
layout(std140, binding = 0) uniform CameraBlock
{
  mat4 u_viewMatrix;
  mat4 u_projMatrix;
  vec3 u_camPosition;
};

layout(std140, binding = 1) uniform PostProcessBlock
{
  mat4 u_invViewProj;
  mat4 u_viewProj;
  vec4 u_camPosScreenSize; // Camera position (x, y, z) and the screen width (w).
  vec4 u_screenSizeGammaBloom;  // Screen height (x), gamma (y) and bloom intensity (z). w is unused.
  ivec4 u_postProcessingPasses; // Tone mapping operator (x), using bloom (y), using FXAA (z) and using screenspace godrays (w).
};

// Directional light uniforms.
layout(std140, binding = 5) uniform DirectionalBlock
{
  vec4 u_lColourIntensity;
  vec4 u_lDirection;
  ivec4 u_directionalSettings; // Shadow quality (x). y, z and w are unused.
};

layout(std140, binding = 7) uniform CascadedShadowBlock
{
  mat4 u_lightVP[NUM_CASCADES];
  float u_cascadeSplits[NUM_CASCADES];
  float u_lightBleedReduction;
};

// Uniforms for the geometry buffer.
layout(binding = 2) uniform sampler2D godrayTex;
layout(binding = 3) uniform sampler2D gPosition;
layout(binding = 4) uniform sampler2D gNormal;
layout(binding = 5) uniform sampler2D gAlbedo;
layout(binding = 6) uniform sampler2D gMatProp;
layout(binding = 7) uniform sampler2D cascadeMaps[NUM_CASCADES]; // TODO: Texture arrays.

// Output colour variable.
layout(location = 0) out vec4 fragColour;

// PBR BRDF.
vec3 filamentBRDF(vec3 l, vec3 v, vec3 n, float roughness, float metallic,
                  vec3 dielectricF0, vec3 metallicF0, vec3 f90, vec3 diffuseAlbedo);
// Shadow calculations.
float calcShadow(uint cascadeIndex, vec3 position, vec3 normal, vec3 lightDir, int quality);

void main()
{
  vec2 fTexCoords = gl_FragCoord.xy / textureSize(gPosition, 0).xy;

  vec3 position = texture(gPosition, fTexCoords).xyz;
  vec3 normal = normalize(texture(gNormal, fTexCoords).xyz);
  vec4 albedoReflectance = texture(gAlbedo, fTexCoords);
  vec3 albedo = albedoReflectance.rgb;
  vec2 mr = texture(gMatProp, fTexCoords).rg;
  float metallic = mr.r;
  float roughness = mr.g;

  // Remap material properties.
  vec3 metallicF0 = albedo * metallic;
  vec3 dielectricF0 = 0.16 * albedoReflectance.aaa * albedoReflectance.aaa;

  // Dirty, setting f90 to 1.0.
  vec3 f90 = vec3(1.0);

  // Light properties.
  vec3 view = normalize(u_camPosition - position);
  vec3 light = normalize(u_lDirection.xyz);
  vec3 lightColour = u_lColourIntensity.xyz;
  float lightIntensity = u_lColourIntensity.w;
  float nDotL = clamp(dot(normal, light), 0.0, 1.0);

  // Cascaded shadow mapping.
  vec4 clipSpacePos = u_viewMatrix * vec4(position, 1.0);
  float shadowFactor = 1.0;
  for (uint i = 0; i < NUM_CASCADES; i++)
  {
    if (clipSpacePos.z > -(u_cascadeSplits[i]))
    {
      shadowFactor = calcShadow(i, position, normal, light, u_directionalSettings.x);
      break;
    }
  }

  // Compute the radiance contribution.
  vec3 radiance = filamentBRDF(light, view, normal, roughness, metallic,
                               dielectricF0, metallicF0, f90, albedo);
  radiance *= (lightIntensity * nDotL * lightColour * shadowFactor);

  // Add on screen-space godrays.
  if (u_postProcessingPasses.w != 0)
    radiance += texture(godrayTex, fTexCoords).rgb;

  radiance = max(radiance, vec3(0.0));
  fragColour = vec4(radiance, 1.0);
}

//------------------------------------------------------------------------------
// Filament PBR.
//------------------------------------------------------------------------------
// Normal distribution function.
float nGGX(float nDotH, float actualRoughness)
{
  float a = nDotH * actualRoughness;
  float k = actualRoughness / (1.0 - nDotH * nDotH + a * a);
  return k * k * (1.0 / PI);
}

// Fast visibility term. Incorrect as it approximates the two square roots.
float vGGXFast(float nDotV, float nDotL, float actualRoughness)
{
  float a = actualRoughness;
  float vVGGX = nDotL * (nDotV * (1.0 - a) + a);
  float lVGGX = nDotV * (nDotL * (1.0 - a) + a);
  return 0.5 / max(vVGGX + lVGGX, 1e-5);
}

// Schlick approximation for the Fresnel factor.
vec3 sFresnel(float vDotH, vec3 f0, vec3 f90)
{
  float p = 1.0 - vDotH;
  return f0 + (f90 - f0) * p * p * p * p * p;
}

// Cook-Torrance specular for the specular component of the BRDF.
vec3 fsCookTorrance(float nDotH, float lDotH, float nDotV, float nDotL,
                    float vDotH, float actualRoughness, vec3 f0, vec3 f90)
{
  float D = nGGX(nDotH, actualRoughness);
  vec3 F = sFresnel(vDotH, f0, f90);
  float V = vGGXFast(nDotV, nDotL, actualRoughness);
  return D * F * V;
}

// Burley diffuse for the diffuse component of the BRDF.
vec3 fdBurley(float nDotV, float nDotL, float lDotH, float actualRoughness, vec3 diffuseAlbedo)
{
  vec3 f90 = vec3(0.5 + 2.0 * actualRoughness * lDotH * lDotH);
  vec3 lightScat = sFresnel(nDotL, vec3(1.0), f90);
  vec3 viewScat = sFresnel(nDotV, vec3(1.0), f90);
  return lightScat * viewScat * (1.0 / PI) * diffuseAlbedo;
}

// Lambertian diffuse for the diffuse component of the BRDF.
vec3 fdLambert(vec3 diffuseAlbedo)
{
  return diffuseAlbedo / PI;
}

// Lambertian diffuse for the diffuse component of the BRDF. Corrected to guarantee
// energy is conserved.
vec3 fdLambertCorrected(vec3 f0, vec3 f90, float vDotH, float lDotH,
                        vec3 diffuseAlbedo)
{
  // Making the assumption that the external medium is air (IOR of 1).
  vec3 iorExtern = vec3(1.0);
  // Calculating the IOR of the medium using f0.
  vec3 iorIntern = (vec3(1.0) - sqrt(f0)) / (vec3(1.0) + sqrt(f0));
  // Ratio of the IORs.
  vec3 iorRatio = iorExtern / iorIntern;

  // Compute the incoming and outgoing Fresnel factors.
  vec3 fIncoming = sFresnel(lDotH, f0, f90);
  vec3 fOutgoing = sFresnel(vDotH, f0, f90);

  // Compute the fraction of light which doesn't get reflected back into the
  // medium for TIR.
  vec3 rExtern = PI * (20.0 * f0 + 1.0) / 21.0;
  // Use rExtern to compute the fraction of light which gets reflected back into
  // the medium for TIR.
  vec3 rIntern = vec3(1.0) - (iorRatio * iorRatio * (vec3(1.0) - rExtern));

  // The TIR contribution.
  vec3 tirDiffuse = vec3(1.0) - (rIntern * diffuseAlbedo);

  // The final diffuse BRDF.
  return (iorRatio * iorRatio) * diffuseAlbedo * (vec3(1.0) - fIncoming) * (vec3(1.0) - fOutgoing) / (PI * tirDiffuse);
}

// The final combined BRDF.
// TODO: Compensate for energy loss by accounting for multi-scattering events.
vec3 filamentBRDF(vec3 l, vec3 v, vec3 n, float roughness, float metallic,
                  vec3 dielectricF0, vec3 metallicF0, vec3 f90,
                  vec3 diffuseAlbedo)
{
  vec3 h = normalize(v + l);

  float nDotV = max(abs(dot(n, v)), 1e-5);
  float nDotL = clamp(dot(n, l), 1e-5, 1.0);
  float nDotH = clamp(dot(n, h), 1e-5, 1.0);
  float lDotH = clamp(dot(l, h), 1e-5, 1.0);
  float vDotH = clamp(dot(v, h), 1e-5, 1.0);

  float clampedRoughness = max(roughness, 0.045);
  float actualRoughness = clampedRoughness * clampedRoughness;

  vec3 fs = fsCookTorrance(nDotH, lDotH, nDotV, nDotL, vDotH, actualRoughness, dielectricF0, f90);
  vec3 fd = fdLambertCorrected(dielectricF0, f90, vDotH, lDotH, diffuseAlbedo);
  vec3 dielectricBRDF = fs + fd;

  vec3 metallicBRDF = fsCookTorrance(nDotH, lDotH, nDotV, nDotL, vDotH, actualRoughness, metallicF0, f90);

  return mix(dielectricBRDF, metallicBRDF, metallic);
}

//------------------------------------------------------------------------------
// Shadow calculations using cascaded exponentially warped variance shadow maps.
//------------------------------------------------------------------------------
// Warp the depth.
vec2 warpDepth(float depth)
{
  float posWarp = exp(WARP * depth);
  float negWarp = -1.0 * exp(-1.0 * WARP * depth);
  return vec2(posWarp, negWarp);
}

// Compute the Chebyshev bounds to determine if the fragment is in shadow or not.
float computeChebyshevBound(float moment1, float moment2, float depth)
{
  float variance2 = moment2 - moment1 * moment1;
  float diff = depth - moment1;
  float diff2 = diff * diff;
  float pMax = clamp((variance2 / (variance2 + diff2) - u_lightBleedReduction) / (1.0 - u_lightBleedReduction), 0.0, 1.0);

  return moment1 < depth ? pMax : 1.0;
}

// Calculate the occlusion factor.
float calcShadow(uint cascadeIndex, vec3 position, vec3 normal, vec3 lightDir, int quality)
{
  vec4 lightClipPos = u_lightVP[cascadeIndex] * vec4(position, 1.0);
  vec3 projCoords = lightClipPos.xyz / lightClipPos.w;
  projCoords = 0.5 * projCoords + 0.5;

  float shadowFactor = 1.0;
  if (quality == 1)
  {
    // High quality shadows.
    vec4 moments = texture(cascadeMaps[cascadeIndex], projCoords.xy).rgba;
    vec2 warpedDepth = warpDepth(projCoords.z);

    float shadowFactor1 = computeChebyshevBound(moments.r, moments.g, warpedDepth.r);
    float shadowFactor2 = computeChebyshevBound(moments.b, moments.a, warpedDepth.g);
    shadowFactor = min(shadowFactor1, shadowFactor2);
  }
  else if (quality == 0)
  {
    // Hard shadows.
    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);
    float shadowDepth = texture(cascadeMaps[cascadeIndex], projCoords.xy).r;
    shadowFactor = projCoords.z - bias >= shadowDepth ? 0.0 : 1.0;
  }

  return shadowFactor;
}
